import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { io } from "socket.io-client";

const socket = io();

let localStream: MediaStream;
let remoteStream: MediaStream;

export default function Home() {
  const [pc, setPc] = useState<RTCPeerConnection>();

  useEffect(() => {
    if (!pc) {
      setPc(
        new RTCPeerConnection({
          iceServers: [
            {
              urls: [
                "stun:stun1.l.google.com:19302",
                "stun:stun2.l.google.com:19302",
              ],
            },
          ],
        }),
      );
    }
  }, []);

  useEffect(() => {
    if (pc) {
      socket.on("offer-event", async (offer) => {
        await pc.setRemoteDescription(new RTCSessionDescription(offer));

        if (offer.type === "offer") {
          const answer = await pc.createAnswer();
          await pc.setLocalDescription(answer);

          console.log(answer);
          socket.emit("offer-event", answer);
        }
        // console.log("offer => ", offer);
        // console.log("type => ", pc.remoteDescription, pc);
      });

      // ice candiates
      socket.on("new-ice-candidate", (message) => {
        console.log("iceCAndiate =>", message);
        // console.log(new RTCIceCandidate(message.candidate));
        pc.addIceCandidate(new RTCIceCandidate(message));
      });
    }
  }, [pc]);

  const localVideoRef = useRef<null | HTMLVideoElement>(null);
  const remoteVideoRef = useRef<null | HTMLVideoElement>(null);

  async function getMedia() {
    if (!pc) {
      return;
    }
    localStream = await navigator.mediaDevices.getUserMedia({
      audio: true,
      video: true,
    });
    remoteStream = new MediaStream();

    localStream.getTracks().forEach((track) => {
      pc.addTrack(track, localStream);
    });

    pc.ontrack = (track) => {
      remoteStream = track.streams[0];
    };

    if (localVideoRef.current) {
      localVideoRef.current.srcObject = localStream;
      localVideoRef.current.onloadedmetadata = () => {
        localVideoRef.current?.play();
      };
    }
  }

  async function connect() {
    if (!pc) {
      return;
    }

    pc.onicecandidate = (event) => {
      // console.log("ice candidate => ", event.candidate);
      if (event.candidate) {
        socket.emit("new-ice-candidate", event.candidate.toJSON());
      }
    };

    const offer = await pc.createOffer();
    // fuck await
    await pc.setLocalDescription(offer);

    console.log(offer, pc.localDescription);

    socket.emit("offer-event", offer);
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <video className="bg-red-500" ref={localVideoRef}></video>
        <video className="bg-green-500" ref={remoteVideoRef}></video>
        <button className="bg-blue-500 px-4 py-2" onClick={getMedia}>
          Cam & Audio
        </button>
        <button className="bg-indigo-500 px-4 py-2" onClick={connect}>
          Connect
        </button>
      </div>
    </div>
  );
}
